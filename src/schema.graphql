type Query {
  info: String!
  feed(filter: String, skip: Int, first: Int, orderBy: LinkOrderByInput): Feed!
}

enum LinkOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}

type Feed {
  posts: [Post!]!
  count: Int!
}

type Mutation {
  post( description: String!): Post!
  option(answer: String!): Option!
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  vote(postId: ID!): Vote
}

type Subscription {
  newPost: Post
  newVote: Vote
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  posts: [Post!]!
}

type Post {
  id: ID!
  description: String!
  postedBy: User
  options: [Option!]!
}
type Option {
  id: ID! 
  answer: String!
  votedBy: User
  votes: [Vote!]!
 }

type Vote {
  id: ID!
  option: Option!
  user: User!
}